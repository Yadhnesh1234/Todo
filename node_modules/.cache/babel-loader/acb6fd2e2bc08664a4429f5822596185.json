{"ast":null,"code":"const initialState = [];\n\nconst incompleteReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"MARK_INCOMPLETE\":\n      return [...state, action.todo];\n\n    case \"DELETE_TODO\":\n    case \"MARK_COMPLETE\":\n      return [...state.filter(todo => todo !== action.todo)];\n\n    default:\n      return [...state];\n  }\n};\n\nexport default incompleteReducer;","map":{"version":3,"names":["initialState","incompleteReducer","state","action","type","todo","filter"],"sources":["/home/yadhnesh/React App/react-redux-typescript/src/reducers/incompleteReducer.tsx"],"sourcesContent":["import { act } from \"react-dom/test-utils\";\nimport { Reducer } from \"redux\";\n\nimport {\n\tdeleteTodoAction,\n\tmarkCompleteAction,\n\tmarkIncompleteAction,\n} from \"types/actionsType\";\n\nimport { incomplete } from \"types/storeType\";\n\nconst initialState: incomplete = [];\n\nconst incompleteReducer: Reducer<\n\tincomplete,\n\tdeleteTodoAction | markCompleteAction | markIncompleteAction\n> = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase \"MARK_INCOMPLETE\":\n\t\t\treturn [...state, action.todo];\n\t\tcase \"DELETE_TODO\":\n\t\tcase \"MARK_COMPLETE\":\n\t\t\treturn [...state.filter((todo) => todo !== action.todo)];\n\t\tdefault:\n\t\t\treturn [...state];\n\t}\n};\n\nexport default incompleteReducer;\n"],"mappings":"AAWA,MAAMA,YAAwB,GAAG,EAAjC;;AAEA,MAAMC,iBAGL,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBF,YAAyB;EAAA,IAAXG,MAAW;;EACrC,QAAQA,MAAM,CAACC,IAAf;IACC,KAAK,iBAAL;MACC,OAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,IAAlB,CAAP;;IACD,KAAK,aAAL;IACA,KAAK,eAAL;MACC,OAAO,CAAC,GAAGH,KAAK,CAACI,MAAN,CAAcD,IAAD,IAAUA,IAAI,KAAKF,MAAM,CAACE,IAAvC,CAAJ,CAAP;;IACD;MACC,OAAO,CAAC,GAAGH,KAAJ,CAAP;EAPF;AASA,CAbD;;AAeA,eAAeD,iBAAf"},"metadata":{},"sourceType":"module"}